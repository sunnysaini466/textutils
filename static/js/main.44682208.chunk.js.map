{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","myStyle","className","style","id","type","Navbar","props","toggleMode","to","title","contactUs","onClick","enableToggleMode","htmlFor","btnText","TextForm","text","setText","heading","onChange","event","console","log","target","value","rows","disabled","length","newText","toUpperCase","showAlert","newText1","toLowerCase","newText2","split","map","word","slice","join","document","getElementById","select","navigator","clipboard","writeText","newText4","filter","element","Alert","height","alert","role","message","defaultProps","App","mode","setMode","setbtnText","setAlert","setTimeout","body","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.44682208.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nexport default function About() {\n  const [myStyle, setmyStyle] = useState({\n    color: \"black\",\n    backgroundColor: \"white\",\n  });\n\n  // const [btnStyle, setbtnStyle] = useState({\n  //   text: \"Enable Dark Mode\",\n  // });\n\n  // const toggleEnable = () => {\n  //   if (myStyle.color === \"black\") {\n  //     setmyStyle({\n  //       color: \"white\",\n  //       backgroundColor: \"black\",\n  //     });\n  //     setbtnStyle({\n  //       text: \"Enable Light Mode\",\n  //     });\n  //   } else {\n  //     setmyStyle({\n  //       color: \"black\",\n  //       backgroundColor: \"white\",\n  //     });\n  //     setbtnStyle({\n  //       text: \"Enable Dark Mode\",\n  //     });\n  //   }\n  // };\n\n  return (\n    <>\n      <div className=\"container\" style={myStyle}>\n        <h2 style={myStyle}>About Us</h2>\n        <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\n          <div className=\"accordion-item\" style={myStyle}>\n            <h2 className=\"accordion-header\" id=\"headingOne\" style={myStyle}>\n              <button\n                className=\"accordion-button\"\n                type=\"button\"\n                data-bs-toggle=\"collapse\"\n                data-bs-target=\"#collapseOne\"\n                aria-expanded=\"true\"\n                aria-controls=\"collapseOne\"\n                style={myStyle}\n              >\n                <strong>Analyze your text</strong>\n              </button>\n            </h2>\n            <div\n              id=\"collapseOne\"\n              className=\"accordion-collapse collapse show\"\n              aria-labelledby=\"headingOne\"\n              data-bs-parent=\"#accordionExample\"\n            >\n              <div className=\"accordion-body\">\n                <strong>This is the first item's accordion body.</strong> It is\n                shown by default, until the collapse plugin adds the appropriate\n                classes that we use to style each element. These classes control\n                the overall appearance, as well as the showing and hiding via\n                CSS transitions. You can modify any of this with custom CSS or\n                overriding our default variables. It's also worth noting that\n                just about any HTML can go within the{\" \"}\n                <code>.accordion-body</code>, though the transition does limit\n                overflow.\n              </div>\n            </div>\n          </div>\n          <div className=\"accordion-item\" style={myStyle}>\n            <h2 className=\"accordion-header\" id=\"headingTwo\">\n              <button\n                className=\"accordion-button collapsed\"\n                type=\"button\"\n                data-bs-toggle=\"collapse\"\n                data-bs-target=\"#collapseTwo\"\n                aria-expanded=\"false\"\n                aria-controls=\"collapseTwo\"\n                style={myStyle}\n              >\n                <strong>Free to use</strong>\n              </button>\n            </h2>\n            <div\n              id=\"collapseTwo\"\n              className=\"accordion-collapse collapse\"\n              aria-labelledby=\"headingTwo\"\n              data-bs-parent=\"#accordionExample\"\n            >\n              <div className=\"accordion-body\">\n                <strong>This is the second item's accordion body.</strong> It is\n                hidden by default, until the collapse plugin adds the\n                appropriate classes that we use to style each element. These\n                classes control the overall appearance, as well as the showing\n                and hiding via CSS transitions. You can modify any of this with\n                custom CSS or overriding our default variables. It's also worth\n                noting that just about any HTML can go within the{\" \"}\n                <code>.accordion-body</code>, though the transition does limit\n                overflow.\n              </div>\n            </div>\n          </div>\n          <div className=\"accordion-item\" style={myStyle}>\n            <h2 className=\"accordion-header\" id=\"headingThree\">\n              <button\n                className=\"accordion-button collapsed\"\n                type=\"button\"\n                data-bs-toggle=\"collapse\"\n                data-bs-target=\"#collapseThree\"\n                aria-expanded=\"false\"\n                aria-controls=\"collapseThree\"\n                style={myStyle}\n              >\n                <strong>Browser Compatible</strong>\n              </button>\n            </h2>\n            <div\n              id=\"collapseThree\"\n              className=\"accordion-collapse collapse\"\n              aria-labelledby=\"headingThree\"\n              data-bs-parent=\"#accordionExample\"\n            >\n              <div className=\"accordion-body\">\n                <strong>This is the third item's accordion body.</strong> It is\n                hidden by default, until the collapse plugin adds the\n                appropriate classes that we use to style each element. These\n                classes control the overall appearance, as well as the showing\n                and hiding via CSS transitions. You can modify any of this with\n                custom CSS or overriding our default variables. It's also worth\n                noting that just about any HTML can go within the{\" \"}\n                <code>.accordion-body</code>, though the transition does limit\n                overflow.\n              </div>\n            </div>\n          </div>\n        </div>\n        {/* <div className=\"container my-3\">\n          <button\n            onClick={toggleEnable}\n            type=\"button\"\n            className=\"btn btn-primary\"\n          >\n            {btnStyle.text}\n          </button>\n        </div> */}\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  \n  Link,\n  \n  \n} from \"react-router-dom\";\n\nexport default function Navbar(props) {\n  return (\n    <nav\n      className={`navbar navbar-expand-lg navbar-${props.toggleMode} bg-${props.toggleMode}`}\n    >\n      <div className=\"container-fluid\">\n        <Link className=\"navbar-brand\" to=\"/\">\n          {props.title}\n        </Link>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-bs-toggle=\"collapse\"\n          data-bs-target=\"#navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n            <li className=\"nav-item\">\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\n                Home\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link className=\"nav-link\" to=\"/about\">\n                About\n              </Link>\n            </li> \n             <li className=\"nav-item\">\n              <Link className=\"nav-link\" to=\"/\">\n                {props.contactUs}\n              </Link>\n            </li>\n          </ul>\n          {/* <form className=\"d-flex\">\n            <input\n              className=\"form-control me-2\"\n              type=\"search\"\n              placeholder=\"Search\"\n              aria-label=\"Search\"\n            />\n            <button className=\"btn btn-success\" type=\"submit\">\n              Search\n            </button>\n          </form> */}\n          <div\n            className={`form-check form-switch text-${\n              props.toggleMode === \"light\" ? \"dark\" : \"light\"\n            }`}\n          >\n            <input\n              className=\"form-check-input\"\n              type=\"checkbox\"\n              id=\"flexSwitchCheckDefault\"\n              onClick={props.enableToggleMode}\n            />\n            <label\n              className=\"form-check-label\"\n              htmlFor=\"flexSwitchCheckDefault\"\n            >\n              {props.btnText}\n            </label>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nNavbar.propTypes = {\n  title: PropTypes.string,\n  contactUs: PropTypes.string,\n};\n\nNavbar.defaultProps = {\n  title: \"Set Title Here\",\n  contactUs: \"My Contact\",\n};\n","import React, { useState } from \"react\";\n\nexport default function TextForm(props) {\n  const [text, setText] = useState(\"\");\n\n  const handleUpClick = () => {\n    console.log(\"handle up button clicked\");\n    let newText = text.toUpperCase();\n    setText(newText);\n    props.showAlert(\"Text is converted to upper case\", \"success\");\n  };\n\n  const handleLoClick = () => {\n    console.log(\"handle lo button clicked\");\n    let newText1 = text.toLowerCase();\n    setText(newText1);\n    props.showAlert(\"Text is converted to lower case\", \"success\");\n  };\n\n  const handleCapitalizedClick = () => {\n    console.log(\"handle handleCapitalizedClick button clicked\");\n    let newText2 = text\n      .split(\" \")\n      .map((word) => word[0].toUpperCase() + word.slice(1).toLowerCase())\n      .join(\" \");\n    setText(newText2);\n  };\n\n  const handleCLRClick = () => {\n    console.log(\"handle handleCLRClick button clicked\");\n    let newText3 = \"\";\n    setText(newText3);\n    props.showAlert(\"Text is cleared\", \"success\");\n  };\n\n  const handleCopy = () => {\n    console.log(\"handle handleCopy button clicked\");\n    var text = document.getElementById(\"myBox\");\n    text.select();\n    navigator.clipboard.writeText(text.value);\n    props.showAlert(\"Text has been copied.\", \"success\");\n  };\n\n  const handleExtraSpaces = () => {\n    var newText4 = text.split(/[ ]+/);\n    setText(newText4.join(\" \"));\n    props.showAlert(\"Extra spaces are removed from text.\", \"success\");\n  };\n\n  const handleOnChange = (event) => {\n    console.log(\"handle on change clicked\");\n    setText(event.target.value);\n  };\n\n  return (\n    <>\n      <div\n        className=\"container\"\n        style={{ color: props.toggleMode === \"dark\" ? \"white\" : \"black\" }}\n      >\n        <h3 className=\"mb-4\">{props.heading}</h3>\n        <div className=\"mb-3\">\n          <textarea\n            className=\"form-control\"\n            onChange={handleOnChange}\n            value={text}\n            id=\"myBox\"\n            rows=\"20\"\n            style={{\n              backgroundColor:\n                props.toggleMode === \"dark\" ? \"#2c373f\" : \"white\",\n              color: props.toggleMode === \"dark\" ? \"white\" : \"black\",\n            }}\n          ></textarea>\n        </div>\n\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick}>\n          Convert to Uppercase\n        </button>\n        <button disabled={text.length===0} className=\"btn btn-success mx-1 my-1\" onClick={handleLoClick}>\n          Convert to Lowercase\n        </button>\n        <button\n        disabled={text.length===0}\n          className=\"btn btn-warning mx-1 my-1\"\n          onClick={handleCapitalizedClick}\n        >\n          Convert to Capitalized\n        </button>\n        <button disabled={text.length===0} className=\"btn btn-danger mx-1 my-1\" onClick={handleCLRClick}>\n          Clear Text\n        </button>\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleCopy}>\n          Copy Text\n        </button>\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleExtraSpaces}>\n          Remove Extra Spaces\n        </button>\n      </div>\n      <div\n        className=\"container my-3\"\n        style={{ color: props.toggleMode === \"dark\" ? \"white\" : \"black\" }}\n      >\n        <h2>My Text Summary</h2>\n        <p>\n          {text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} Words \n        </p>\n        <p>{0.008 * text.split(\"\").filter((element)=>{return element.length!==0}).length} Minutes to read</p>\n        <h3>Preview</h3>\n        <p>{text.length > 0 ? text : \"Enter your to preview here.\"}</p>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\n\nexport default function Alert(props) {\n  return (\n    <div style={{height:'50px'}}>\n    {props.alert && \n      <div className={`alert alert-${props.alert.type}`} role=\"alert\">\n        <strong>{props.alert.type}</strong> {props.alert.message}\n      </div>}\n      </div>\n    \n  );\n}\n","import \"./App.css\";\nimport About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n\n  const [btnText, setbtnText] = useState(\"Enable Dark Mode\");\n\n  const [alert, setAlert] = useState(\"initialState\");\n\n  const showAlert = (message, type) => {\n    setAlert({\n      message: message,\n      type: type,\n    });\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  const enableToggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      setbtnText(\"Disable Dark Mode\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark Mode is enabled.\", \"success\");\n      document.title = \"Textutils - Dark Mode\";\n    } else {\n      setMode(\"light\");\n      setbtnText(\"Enable Dark Mode\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Dark Mode is disabled.\", \"success\");\n      document.title = \"Textutils - Light Mode\";\n    }\n  };\n\n  return (\n    <>\n      <Router>\n        <Navbar\n          title=\"TextUtils\"\n          toggleMode={mode}\n          enableToggleMode={enableToggleMode}\n          btnText={btnText}\n        />\n        <Alert alert={alert}></Alert>\n        <div className=\"container my-3\">\n          <Switch>\n            <Route path=\"/about\">\n              <About />\n            </Route>\n            <TextForm\n              heading=\"Text Utils - Word Counter, Lowercase to Uppercase, Uppercase to Lowercase, Copy Text\"\n              toggleMode={mode}\n              showAlert={showAlert}\n            />\n            <Route path=\"/\"></Route>\n          </Switch>\n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
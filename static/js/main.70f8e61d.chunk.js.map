{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","toggleMode","href","title","type","id","onClick","enableToggleMode","htmlFor","btnText","TextForm","useState","text","setText","style","color","heading","onChange","event","console","log","target","value","rows","backgroundColor","newText","toUpperCase","showAlert","newText1","toLowerCase","newText2","split","map","word","slice","join","document","getElementById","select","navigator","clipboard","writeText","newText4","length","trim","replace","Alert","alert","role","message","defaultProps","contactUs","App","mode","setMode","setbtnText","setAlert","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.70f8e61d.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link,\n//   useRouteMatch,\n//   useParams,\n// } from \"react-router-dom\";\n\nexport default function Navbar(props) {\n  return (\n    <nav\n      className={`navbar navbar-expand-lg navbar-${props.toggleMode} bg-${props.toggleMode}`}\n    >\n      <div className=\"container-fluid\">\n        <a className=\"navbar-brand\" href=\"/\">\n          {props.title}\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-bs-toggle=\"collapse\"\n          data-bs-target=\"#navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n            <li className=\"nav-item\">\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">\n                Home\n              </a>\n            </li>\n            {/* <li className=\"nav-item\">\n              <Link className=\"nav-link\" to=\"/about\">\n                About\n              </Link>\n            </li> */}\n            {/* <li className=\"nav-item\">\n              <Link className=\"nav-link\" to=\"/\">\n                {props.contactUs}\n              </Link>\n            </li> */}\n          </ul>\n          {/* <form className=\"d-flex\">\n            <input\n              className=\"form-control me-2\"\n              type=\"search\"\n              placeholder=\"Search\"\n              aria-label=\"Search\"\n            />\n            <button className=\"btn btn-success\" type=\"submit\">\n              Search\n            </button>\n          </form> */}\n          <div\n            className={`form-check form-switch text-${\n              props.toggleMode === \"light\" ? \"dark\" : \"light\"\n            }`}\n          >\n            <input\n              className=\"form-check-input\"\n              type=\"checkbox\"\n              id=\"flexSwitchCheckDefault\"\n              onClick={props.enableToggleMode}\n            />\n            <label\n              className=\"form-check-label\"\n              htmlFor=\"flexSwitchCheckDefault\"\n            >\n              {props.btnText}\n            </label>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nNavbar.propTypes = {\n  title: PropTypes.string,\n  contactUs: PropTypes.string,\n};\n\nNavbar.defaultProps = {\n  title: \"Set Title Here\",\n  contactUs: \"My Contact\",\n};\n","import React, { useState } from \"react\";\n\nexport default function TextForm(props) {\n  const [text, setText] = useState(\"\");\n\n  const handleUpClick = () => {\n    console.log(\"handle up button clicked\");\n    let newText = text.toUpperCase();\n    setText(newText);\n    props.showAlert(\"Text is converted to upper case\", \"success\");\n  };\n\n  const handleLoClick = () => {\n    console.log(\"handle lo button clicked\");\n    let newText1 = text.toLowerCase();\n    setText(newText1);\n    props.showAlert(\"Text is converted to lower case\", \"success\");\n  };\n\n  const handleCapitalizedClick = () => {\n    console.log(\"handle handleCapitalizedClick button clicked\");\n    let newText2 = text\n      .split(\" \")\n      .map((word) => word[0].toUpperCase() + word.slice(1).toLowerCase())\n      .join(\" \");\n    setText(newText2);\n  };\n\n  const handleCLRClick = () => {\n    console.log(\"handle handleCLRClick button clicked\");\n    let newText3 = \"\";\n    setText(newText3);\n    props.showAlert(\"Text is cleared\", \"success\");\n  };\n\n  const handleCopy = () => {\n    console.log(\"handle handleCopy button clicked\");\n    var text = document.getElementById(\"myBox\");\n    text.select();\n    navigator.clipboard.writeText(text.value);\n    props.showAlert(\"Text has been copied.\", \"success\");\n  };\n\n  const handleExtraSpaces = () => {\n    var newText4 = text.split(/[ ]+/);\n    setText(newText4.join(\" \"));\n    props.showAlert(\"Extra spaces are removed from text.\", \"success\");\n  };\n\n  const handleOnChange = (event) => {\n    console.log(\"handle on change clicked\");\n    setText(event.target.value);\n  };\n\n  return (\n    <>\n      <div\n        className=\"container\"\n        style={{ color: props.toggleMode === \"dark\" ? \"white\" : \"black\" }}\n      >\n        <h3>{props.heading}</h3>\n        <div className=\"mb-3\">\n          <textarea\n            className=\"form-control\"\n            onChange={handleOnChange}\n            value={text}\n            id=\"myBox\"\n            rows=\"20\"\n            style={{\n              backgroundColor:\n                props.toggleMode === \"dark\" ? \"#2c373f\" : \"white\",\n              color: props.toggleMode === \"dark\" ? \"white\" : \"black\",\n            }}\n          ></textarea>\n        </div>\n\n        <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>\n          Convert to Uppercase\n        </button>\n        <button className=\"btn btn-success mx-1\" onClick={handleLoClick}>\n          Convert to Lowercase\n        </button>\n        <button\n          className=\"btn btn-warning mx-1\"\n          onClick={handleCapitalizedClick}\n        >\n          Convert to Capitalized\n        </button>\n        <button className=\"btn btn-danger mx-1\" onClick={handleCLRClick}>\n          Clear Text\n        </button>\n        <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>\n          Copy Text\n        </button>\n        <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>\n          Remove Extra Spaces\n        </button>\n      </div>\n      <div\n        className=\"container my-3\"\n        style={{ color: props.toggleMode === \"dark\" ? \"white\" : \"black\" }}\n      >\n        <h2>My Text Summary</h2>\n        <p>\n          {text.length} Characters | {text.trim().replace('/\\s+/gi', ' ').split(' ').length} Words\n        </p>\n        <p>{0.008 * text.split(\" \").length} Minutes to read</p>\n        <h3>Preview</h3>\n        <p>{text.length > 0 ? text : \"Enter your to preview here.\"}</p>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\n\nexport default function Alert(props) {\n  return (\n    props.alert && \n      <div className={`alert alert-${props.alert.type}`} role=\"alert\">\n        <strong>{props.alert.type}</strong> {props.alert.message}\n      </div>\n    \n  );\n}\n","import \"./App.css\";\n//import About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\n// import { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n\n  const [btnText, setbtnText] = useState(\"Enable Dark Mode\");\n\n  const [alert, setAlert] = useState(\"initialState\");\n\n  const showAlert = (message, type) => {\n    setAlert({\n      message: message,\n      type: type,\n    });\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  const enableToggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      setbtnText(\"Disable Dark Mode\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark Mode is enabled.\", \"success\");\n      document.title = \"Textutils - Dark Mode\";\n    } else {\n      setMode(\"light\");\n      setbtnText(\"Enable Dark Mode\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Dark Mode is disabled.\", \"success\");\n      document.title = \"Textutils - Light Mode\";\n    }\n  };\n\n  return (\n    <>\n      {/* <Router> */}\n      <Navbar\n        title=\"TextUtils\"\n        toggleMode={mode}\n        enableToggleMode={enableToggleMode}\n        btnText={btnText}\n      />\n      <Alert alert={alert}></Alert>\n      <div className=\"container my-3\">\n        {/* <Switch>\n            <Route path=\"/about\">\n              <About />\n            </Route> */}\n        <TextForm\n          heading=\"My Textarea\"\n          toggleMode={mode}\n          showAlert={showAlert}\n        />\n        {/* <Route path=\"/\">\n              \n            </Route>\n          </Switch> */}\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}